// ----------------------------------------------------------------------------
// File Path: src/components/PracticeMain/PracticeSheetMusic/AlphaTabRunner.js
// Description: TODO: Write a description
// Author: Daniel Griessler
// Email: dgriessler20@gmail.com
// Created Date: 11/15/2019
// ----------------------------------------------------------------------------

// https://docs.alphatab.net/develop/  for development Documentation

import player from "./default.sf2";
import PitchDetection from "./PitchDetection";
import p5 from "p5";
import Drawer from "./Drawer";
import NoteList from "./NoteList";
import p5Sketch from "./sketch";
import {
    getSpecificSheetMusic,
    getPartSheetMusic,
    getExercise,
    userGetsFeedback,
    getSinglePartSheetMusic
} from "../../../App/musicAssistantApi";
import TexLoaded from "./TexLoaded";
import * as logs from "../../../vendors/Firebase/logs";

/**
 * Runs AlphaTab including initialization and keeping a Drawer and NoteList instance
 */
class AlphaTabRunner {
    static HIGHLIGHT_OFF = 0;
    static HIGHLIGHT_ON = 1;
    static HIGHLIGHT_PENDING_START = 2;
    static HIGHLIGHT_PENDING_STOP = 3;

    api;
    intervalID;
    drawer;
    noteList;
    p5Obj;
    texLoaded;
    partNames;
    renderedOnce;
    playerState;
    getsFeedback;

    /**
     * Initializes the AlphaTab API
     * Displays the piece of music on the screen
     */
    static initializeAPI() {
        this.noteStream = [-1, 0];
        this.noteStreamIndex = 0;
        this.cumulativeTime = 0;
        this.p5Obj = null;
        this.texLoaded = null;
        this.renderedOnce = false;
        this.barCount = 20;
        this.resetDrawPositions = true;

        // AlphaTab API settings
        let settings = {
            player: {
                enablePlayer: true,
                enableCursor: true,
                soundFont: player,
                scrollElement: "#wrapper"
            },
            display: {
                layoutMode: "horizontal",
                startBar: 29,
                barCount: AlphaTabRunner.barCount
            }
        };

        // Creates the AlphaTab API
        this.api = new window.alphaTab.platform.javaScript.AlphaTabApi(
            document.querySelector("#alpha-tab-container"),
            settings
        );

        // Listener is executed when AlphaTab is rendered on the screen
        this.api.addPostRenderFinished(() => {
            this.alphaTabRenderFinished();
        });

        // Listener is executed when the player state changes (e.g. play, pause, and stop)
        this.api.addPlayerStateChanged(() => {
            this.alphaTabPlayerStateChanged();
        });

        // Listener is executed when the player finishes playing the song
        this.api.addPlayerFinished(() => {
            this.alphaTabPlayerFinished();
        });

        this.highlightMeasures = AlphaTabRunner.HIGHLIGHT_OFF;
        this.playerState = 0;
        this.getsFeedback = false;
        this.sheetMusicLength = null;
    }

    /**
     * Run when AlphaTab is rendered on the screen
     * TODO: Fix so that it updates the variables on subsequent alphaTab renders besides the first one
     */
    static alphaTabRenderFinished() {
        if (AlphaTabRunner.playerState !== 1) {
            const data = {
                sheetMusicId: "5050284854B611EAAEC302F168716C78"
            };
            userGetsFeedback(data)
                .then(response => {
                    AlphaTabRunner.getsFeedback = response.data["gets_feedback"];
                })
                .catch(error => {
                    logs.sheetMusicError(null, error, "[AlphaTabRunner/alphaTabRenderFinished]");
                });
        }

        // Retrieves staff lines using IDs attacked to elements generated by AlphaTab. Required editing AlphaTab.js directly
        let topLine = document.getElementById("rect_0");
        let nextLine = document.getElementById("rect_1");
        if (this.renderedOnce) {
            // retrieves the height of the staff lines based on a relative offset to their wrapping contanier
            // used to setup the canvas so the canvas needs to be directly on top of the alphaTab container where these are stored
            const topLineHeight = topLine.y.animVal.value;
            const distanceBetweenLines = nextLine.y.animVal.value - topLineHeight;
            AlphaTabRunner.drawer.setTopLineAndDistanceBetween(
                topLineHeight + 1,
                distanceBetweenLines,
                AlphaTabRunner.texLoaded.getStartOctave()
            );

            let barCursor = document.getElementsByClassName("at-cursor-bar")[0];
            AlphaTabRunner.texLoaded.firstBarMeasurePosition = {
                left: parseInt(
                    barCursor.style.left.substring(0, barCursor.style.left.length - 2),
                    10
                ),
                top: parseInt(
                    barCursor.style.top.substring(0, barCursor.style.left.length - 2),
                    10
                ),
                width: parseInt(
                    barCursor.style.width.substring(0, barCursor.style.left.length - 2),
                    10
                ),
                height: parseInt(
                    barCursor.style.height.substring(0, barCursor.style.left.length - 2),
                    10
                )
            };

            let aTS = document.getElementById("aTS");
            AlphaTabRunner.p5Obj.resizeCanvas(aTS.clientWidth, aTS.clientHeight);

            if (AlphaTabRunner.highlightMeasures === AlphaTabRunner.HIGHLIGHT_PENDING_START) {
                this.startHighlighting();
            } else if (AlphaTabRunner.highlightMeasures === AlphaTabRunner.HIGHLIGHT_PENDING_STOP) {
                this.stopHighlighting();
            }
            return;
        } else {
            this.renderedOnce = true;
        }

        // We were getting an error where rect_0 or rect_1 were null even though AlphaTab said they were rendered
        // This sets up an interval to keep waiting for them to not be null before moving on with the render process
        const lineReadyID = setInterval(() => {
            if (topLine !== null && nextLine !== null) {
                // stop interval from running
                clearInterval(lineReadyID);

                // retrieves the height of the staff lines based on a relative offset to their wrapping contanier
                // used to setup the canvas so the canvas needs to be directly on top of the alphaTab container where these are stored
                const topLineHeight = topLine.y.animVal.value;
                const distanceBetweenLines = nextLine.y.animVal.value - topLineHeight;

                let barCursor = document.getElementsByClassName("at-cursor-bar")[0];
                AlphaTabRunner.texLoaded.firstBarMeasurePosition = {
                    left: parseInt(
                        barCursor.style.left.substring(0, barCursor.style.left.length - 2),
                        10
                    ),
                    top: parseInt(
                        barCursor.style.top.substring(0, barCursor.style.left.length - 2),
                        10
                    ),
                    width: parseInt(
                        barCursor.style.width.substring(0, barCursor.style.left.length - 2),
                        10
                    ),
                    height: parseInt(
                        barCursor.style.height.substring(0, barCursor.style.left.length - 2),
                        10
                    )
                };

                // Creates a new drawer
                AlphaTabRunner.drawer = new Drawer(
                    topLineHeight + 1,
                    distanceBetweenLines,
                    AlphaTabRunner.texLoaded.getStartOctave()
                );

                AlphaTabRunner.p5Obj = new p5(p5Sketch);
                AlphaTabRunner.p5Obj.setup(AlphaTabRunner.drawer);

                // Prepares for microphone input sets up the pitch detection model
                PitchDetection.setupPitchDetection().catch(error => {
                    logs.sheetMusicError(null, error, "[AlphaTabRunner/alphaTabRenderFinished]");
                });
            } else {
                topLine = document.getElementById("rect_0");
                nextLine = document.getElementById("rect_1");
            }
        }, 3);
    }

    static alphaTabPlayerStateChanged() {
        if (AlphaTabRunner.api.playerState !== 1 && AlphaTabRunner.playerState === 1) {
            PitchDetection.stopPitchDetection(this.intervalID, "5050284854B611EAAEC302F168716C78");
            AlphaTabRunner.playerState = 0;

            AlphaTabRunner.p5Obj.clear();
            AlphaTabRunner.api.settings.display.startBar = 1;
            AlphaTabRunner.api.settings.display.barCount = 20;
            AlphaTabRunner.api.updateSettings();
            AlphaTabRunner.api.render();

            AlphaTabRunner.noteStreamIndex = 0;
            AlphaTabRunner.cumulativeTime = 0;
        } else if (AlphaTabRunner.api.playerState === 1 && AlphaTabRunner.playerState === 0) {
            this.resetDrawPositions = true;
            AlphaTabRunner.playerState = 1;
            try {
                let topLine = document.getElementById("rect_0");
                let nextLine = document.getElementById("rect_1");
                const topLineHeight = topLine.y.animVal.value;

                const distanceBetweenLines = nextLine.y.animVal.value - topLineHeight;
                AlphaTabRunner.drawer.setTopLineAndDistanceBetween(
                    topLineHeight + 1,
                    distanceBetweenLines,
                    AlphaTabRunner.texLoaded.getStartOctave()
                );
            } catch (error) {
                logs.sheetMusicError(null, error, "[AlphaTabRunner/alphaTabPlayerStateChanged]");
            }

            AlphaTabRunner.api.playbackRange = null;
            AlphaTabRunner.api.timePosition = 0;

            // Runs the pitch detection model on microphone input and displays it on the screen
            // TODO: Don't show player controls (e.g. play and pause buttons) until AlphaTab and ML5 are ready
            this.intervalID = PitchDetection.startPitchDetection();
        }
    }

    static alphaTabPlayerFinished() {
        // resets the time back to the beginning of the song and our tracker points at the beginning of the piece again
        // TODO: Fix confusion when playing/pausing quickly
        AlphaTabRunner.noteStreamIndex = 0;
        AlphaTabRunner.cumulativeTime = 0;
    }

    static changePart(value) {
        let trackNumber = parseInt(value.substring(1), 10);
        if (!AlphaTabRunner.texLoaded.currentTrackIndexes.includes(trackNumber)) {
            AlphaTabRunner.texLoaded.updateCurrentTrackIndexes(trackNumber);

            AlphaTabRunner.api.renderTracks([
                AlphaTabRunner.api.score.tracks[AlphaTabRunner.texLoaded.currentTrackIndexes[0]]
            ]);

            let data = {
                sheetMusicId: "5050284854B611EAAEC302F168716C78",
                partName: AlphaTabRunner.texLoaded.partNames[trackNumber]
            };
            getPartSheetMusic(data)
                .then(response => {
                    AlphaTabRunner.noteStream = response.data.performance_expectation;
                    AlphaTabRunner.noteList.updateBounds(
                        response.data.lower_upper[0],
                        response.data.lower_upper[1]
                    );
                    AlphaTabRunner.texLoaded.typeOfTex = "Sheet Music";
                })
                .catch(error => {
                    logs.sheetMusicError(
                        error.response.status,
                        error.response.data,
                        "[AlphaTabRunner/changePart]"
                    );
                });
        }
    }

    static startHighlighting() {
        AlphaTabRunner.highlightMeasures = AlphaTabRunner.HIGHLIGHT_ON;
        AlphaTabRunner.p5Obj.loop();
    }

    static stopHighlighting() {
        AlphaTabRunner.highlightMeasures = AlphaTabRunner.HIGHLIGHT_OFF;
        AlphaTabRunner.p5Obj.noLoop();
        AlphaTabRunner.p5Obj.redraw();
    }

    static changeMusic(value, measureStart, measureEnd) {
        if (this.texLoaded !== null && value === this.texLoaded.typeOfTex) {
            return;
        } else {
            if (value === "sheetMusic") {
                AlphaTabRunner.highlightMeasures = AlphaTabRunner.HIGHLIGHT_PENDING_STOP;
                AlphaTabRunner.api.settings.display.barCount = AlphaTabRunner.barCount;
                AlphaTabRunner.api.updateSettings();
                AlphaTabRunner.loadTex();
            } else if (value === "myPart") {
                AlphaTabRunner.highlightMeasures = AlphaTabRunner.HIGHLIGHT_PENDING_STOP;
                AlphaTabRunner.api.settings.display.barCount = AlphaTabRunner.barCount;
                AlphaTabRunner.api.updateSettings();
                this.loadJustMyPart();
            } else if (value === "performance") {
                AlphaTabRunner.highlightMeasures = AlphaTabRunner.HIGHLIGHT_PENDING_START;
                AlphaTabRunner.api.settings.display.barCount =
                    AlphaTabRunner.sheetMusicLength !== null
                        ? AlphaTabRunner.sheetMusicLength
                        : AlphaTabRunner.barCount;
                AlphaTabRunner.api.updateSettings();
                AlphaTabRunner.loadTex();
            } else if (value === "exercise" && measureStart && measureEnd) {
                AlphaTabRunner.highlightMeasures = AlphaTabRunner.HIGHLIGHT_PENDING_STOP;
                AlphaTabRunner.api.settings.display.barCount = AlphaTabRunner.barCount;
                AlphaTabRunner.api.updateSettings();
                AlphaTabRunner.loadExercise(measureStart, measureEnd);
            } else {
                console.log("not recognized: ", value);
            }
        }
    }

    static timeToMeasureNumber(currentPosition, currentMeasure, measureToLength) {
        const EPSILON = 0.01;
        let tempCurrentPosition = currentPosition;
        let tempCurrentMeasure = currentMeasure;
        while (tempCurrentPosition > EPSILON) {
            tempCurrentPosition -= measureToLength[tempCurrentMeasure - 1];
            tempCurrentMeasure++;
        }
        return tempCurrentMeasure;
    }

    static getPlaybackRange() {
        const measureToLength = AlphaTabRunner.texLoaded.measureLengths;
        let playbackMeasures = null;
        if (measureToLength !== null) {
            if (AlphaTabRunner.api.playbackRange !== null) {
                // TODO: figure out how to switch if the endTick is less than the startTick
                // let startTick = AlphaTabRunner.api.playbackRange.startTick;
                // let endTick = AlphaTabRunner.api.playbackRange.endTick;
                // if (endTick < startTick) {
                //     let temp = startTick;
                //     startTick = endTick;
                //     endTick = temp;
                // }

                playbackMeasures = [];
                let currentPosition = AlphaTabRunner.api.timePosition / 1000;
                let comparePosition = currentPosition;
                if (currentPosition === 0) {
                    AlphaTabRunner.api.timePosition = measureToLength[0];
                    comparePosition = AlphaTabRunner.api.tickPosition;
                }
                let ratio = AlphaTabRunner.api.tickPosition / comparePosition;
                let targetEndTime =
                    AlphaTabRunner.api.playbackRange.endTick / ratio -
                    AlphaTabRunner.api.playbackRange.startTick / ratio;
                console.log(
                    AlphaTabRunner.api.playbackRange.endTick,
                    ratio,
                    AlphaTabRunner.api.playbackRange.startTick,
                    targetEndTime,
                    AlphaTabRunner.api.tickPosition,
                    AlphaTabRunner.api.timePosition
                );
                let currentMeasure = 1;
                currentMeasure = this.timeToMeasureNumber(
                    currentPosition,
                    currentMeasure,
                    measureToLength
                );
                playbackMeasures.push(currentMeasure);

                currentPosition = targetEndTime;
                currentMeasure = this.timeToMeasureNumber(
                    currentPosition,
                    currentMeasure,
                    measureToLength
                );
                playbackMeasures.push(currentMeasure - 1);
            }
        }
        return playbackMeasures;
    }

    // static changeTrackVolume(isChecked, name) {
    //     if (AlphaTabRunner.texLoaded) {
    //         let partIndex = AlphaTabRunner.texLoaded.partNames.indexOf(name);
    //         if (partIndex > -1) {
    //             AlphaTabRunner.texLoaded.mutedTracks[partIndex] = !isChecked;
    //             let muteTrackList = [];
    //             let playTrackList = [];
    //             for (let i = 0; i < AlphaTabRunner.texLoaded.mutedTracks.length; i++) {
    //                 if (AlphaTabRunner.texLoaded.mutedTracks[i]) {
    //                     muteTrackList.push(i);
    //                 } else {
    //                     playTrackList.push(i);
    //                 }
    //             }
    //             // AlphaTabRunner.api.changeTrackMute(muteTrackList, true);
    //             // AlphaTabRunner.api.changeTrackMute(playTrackList, false);
    //             AlphaTabRunner.api.changeTrackMute([partIndex], !isChecked)
    //         }
    //     }

    // }

    static async loadJustMyPart() {
        let data = {
            sheetMusicId: "5050284854B611EAAEC302F168716C78"
        };

        getSinglePartSheetMusic(data)
            .then(response => {
                AlphaTabRunner.texLoaded.update(
                    "Sheet Music",
                    response.data.part_list,
                    response.data.clefs,
                    response.data.part,
                    null,
                    1,
                    1
                );
                AlphaTabRunner.texLoaded.updateCurrentTrackIndexes(0);
                AlphaTabRunner.api.tex(
                    response.data.sheet_music,
                    AlphaTabRunner.texLoaded.currentTrackIndexes
                );

                this.updateDropdown(response.data.part_list);

                AlphaTabRunner.noteStream = response.data.performance_expectation;
                AlphaTabRunner.noteList.clear();
                AlphaTabRunner.noteList.updateBounds(
                    response.data.lower_upper[0],
                    response.data.lower_upper[1]
                );
                AlphaTabRunner.texLoaded.setMeasureLengths(
                    response.data.measure_lengths,
                    AlphaTabRunner.barCount
                );
                AlphaTabRunner.sheetMusicLength = AlphaTabRunner.texLoaded.measureLengths.length;
                AlphaTabRunner.texLoaded.updateLengthsPerSection(
                    1,
                    AlphaTabRunner.texLoaded.measureLengths.length + 1,
                    AlphaTabRunner.barCount
                );
                AlphaTabRunner.texLoaded.typeOfTex = "Sheet Music";
            })
            .catch(error => {
                logs.sheetMusicError(
                    error.response.status,
                    error.response.data,
                    "[AlphaTabRunner/loadJustMyPart]"
                );
            });
    }

    static async loadExercise(measureStart, measureEnd) {
        let texToDisplay = document.getElementById("texToDisplay");
        texToDisplay.options[2] = new Option("Exercise", "exercise", false, true);

        let data = {
            sheetMusicId: "5050284854B611EAAEC302F168716C78",
            trackNumber: AlphaTabRunner.texLoaded.currentTrackIndexes[0] + 1,
            staffNumber: 1,
            measureStart,
            measureEnd,
            isDurationExercise: false
        };

        getExercise(data)
            .then(response => {
                AlphaTabRunner.texLoaded.update(
                    "Exercise",
                    response.data.part_list,
                    response.data.clefs,
                    response.data.part,
                    response.data.exerciseId,
                    measureStart,
                    measureEnd
                );
                AlphaTabRunner.api.tex(
                    response.data.sheet_music,
                    AlphaTabRunner.texLoaded.currentTrackIndexes
                );

                this.updateDropdown(response.data.part_list);

                AlphaTabRunner.noteStream = response.data.performance_expectation;
                AlphaTabRunner.noteList.clear();
                AlphaTabRunner.noteList.updateBounds(
                    response.data.lower_upper[0],
                    response.data.lower_upper[1]
                );
                AlphaTabRunner.texLoaded.setMeasureLengths(
                    response.data.measure_lengths,
                    AlphaTabRunner.barCount
                );
            })
            .catch(error => {
                logs.sheetMusicError(
                    error.response.status,
                    error.response.data,
                    "[AlphaTabRunner/loadExercise]"
                );
            });
    }

    static updateDropdown(partList) {
        // TODO: Once track muting is fixed, uncomment to re add it
        // let trackVolume = document.getElementById("volumeTracks");
        // const numberOfChildren = trackVolume.children.length;
        // for (let i = 0; i < numberOfChildren; i++) {
        //     trackVolume.removeChild(trackVolume.lastElementChild);
        // }
        let sheetMusicPartDropdown = document.getElementById("sheetMusicPart");
        if (sheetMusicPartDropdown) {
            let i = 0;
            for (; i < partList.length; i++) {
                sheetMusicPartDropdown.options[i] = new Option(partList[i], "t" + i, false, false);

                // const newTrackVolume = document.createElement('li');
                // const x = document.createElement("INPUT");
                // x.setAttribute("type", "checkbox");
                // x.checked = true;
                // newTrackVolume.appendChild(x);
                // newTrackVolume.appendChild(document.createTextNode(partList[i]));
                // newTrackVolume.onclick = function() {
                //     AlphaTabRunner.changeTrackVolume(this.children[0].checked, this.innerText);
                // };
                // trackVolume.appendChild(newTrackVolume);
            }
            for (; i < sheetMusicPartDropdown.options.length; i++) {
                sheetMusicPartDropdown.options[i] = null;
            }
        }
    }

    static async loadTex() {
        AlphaTabRunner.api.tex(
            `\\title "Newtown Psalm"\n
             \\subtitle "John F. Hudson (b. 1987)"\n
             \\tempo 72\n
             .\n
             \n
             \\track "Soprano"\n
             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db\n
             \\lyrics "Da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, in dí- e- bus no- stris, qui- a non est á- li- us qui pu- gnet pro no- bis ni- si tu De- us no- ster. _ su- per- ve- ni- én- te,"\n
             r.4{dy f} | r.1 | r.1 | r.1 | r.1 |\n
             :4 r f4{dy pp cre} f4{cre} f4{cre} |\n
             gb4{d}.4 gb4.8 gb4.2{dec} |\n
             :4 r gb4{cre} gb4{cre} gb4{cre} |\n
             gb4{d}.4 gb4.8 gb4.2{dec} | r.1 | r.1 |\n
             :4 r ab4{dy p cre} ab4{cre} ab4{cre} |\n
             ab4{d}.4 ab4.8 ab4.2{dec} |\n
             :4 r bb4{cre} bb4{cre} bb4{cre} |\n
             bb4{d}.4 bb4.8 bb4.2{dec} |\n
             :4 r c5{dy mp} :4{tu 3} c5 c5 c5 |\n
             :2 c5{cre} bb4{cre} |\n
             r.4 :8 bb4{dy mf} bb4 :4 bb4 bb4 |\n
             bb4{d}.4 :8 ab4 ab4 r ab4.4 |\n
             ab4.2 :4 ab4 ab4 |\n
             gb4.2{dec} :4 gb4{dec} r{dec} |\n
             gb4.2{dy mp} :4 gb4 gb4 |\n
             :2 ab4 eb4 |\n
             :2 gb4 gb4{dec} |\n
             :2 gb4{- dec} r |\n
             \\ks e \\ts 3 4 \\tempo 168 r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 | \\ts 4 4 r.1 | \\ts 3 4 r.1 | r.1 |\n
             \\ts 4 4 r.1 | r.1 |\n
             :8 a4{dy f} e4 g#4 d#4 f#4 c#4 r.4 |\n
             r.1 |\n
             \n

             \\track "Alto 1"\n
             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db\n
             \\lyrics "Da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, in dí- e- bus no- stris, qui- a non est á- li- us qui pu- gnet pro no- bis ni - si tu De- us _ no- ster. _ _ An- gu- stí- a, _ an- gu- stí- a"\n
             r.4{dy f} | r.1 | r.1 | r.1 | r.1 |\n
             :4 r f4{dy pp cre} f4{cre} f4{cre} |\n
             f4{d}.4 f4.8 f4.2{dec} |\n
             :4 r eb4{cre} eb4{cre} eb4{cre} |\n
             eb4{d}.4 eb4.8 eb4.2{dec} | r.1 | r.1 |\n
             :4 r f4{dy p cre} f4{cre} f4{cre} |\n
             gb4{d}.4 gb4.8 gb4.2{dec} |\n
             :4 r gb4{cre} gb4{cre} gb4{cre} |\n
             ab4{d}.4 ab4.8 gb4.2{dec} |\n
             :4 r ab4{dy mp} :4{tu 3} ab4 ab4 ab4 |\n
             :2 ab4{cre} gb4{cre} |\n
             r.4 :8 gb4{dy mf} gb4 :4 gb4 eb4 |\n
             f4{d}.4 :8 f4 f4 r eb4.4 |\n
             db4.2 :4 c4 db4 |\n
             eb4.2{dec} :4 db4{dec} r |\n
             :4 eb4 f4 f4 f4 |\n
             eb4.2 :4 eb4 b#4 |\n
             :2 db4 db4{dec} |\n
             db4{-}.1{dec} |\n
             \\ks e \\ts 3 4 \\tempo 168 :4 c#4 r r | r.1 | r.1 |\n
             r.1 | r.1 | r.1 | \\ts 4 4 r.1 | \\ts 3 4 r.1 | r.1 |\n
             \\ts 4 4 r.2 :4 r g#4{dy f} |\n
             :4 g#4 f#4 g#4.2 |\n
             g#4{-}.2 :4 r g#4 |\n
             :4 g#4 a4 b4.2 |\n
             \n

             \\track "Alto 2"\n
             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db\n
             \\lyrics "Da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, in dí- e- bus no- stris, qui- a non est á- li- us qui pu- gnet pro no- bis ni - si tu De- us _ no- ster. _ _ An- gu- stí- a, _ an- gu- stí- a"\n
             r.4{dy f} | r.1 | r.1 | r.1 | r.1 |\n
             :4 r f4{dy pp cre} f4{cre} f4{cre} |\n
             f4{d}.4 f4.8 f4.2{dec} |\n
             :4 r eb4{cre} eb4{cre} eb4{cre} |\n
             eb4{d}.4 eb4.8 eb4.2{dec} | r.1 | r.1 |\n
             :4 r f4{dy p cre} f4{cre} f4{cre} |\n
             gb4{d}.4 gb4.8 gb4.2{dec} |\n
             :4 r gb4{cre} gb4{cre} gb4{cre} |\n
             ab4{d}.4 ab4.8 gb4.2{dec} |\n
             :4 r ab4{dy mp} :4{tu 3} ab4 ab4 ab4 |\n
             :2 ab4{cre} gb4{cre} |\n
             r.4 :8 gb4{dy mf} gb4 :4 gb4 eb4 |\n
             f4{d}.4 :8 f4 f4 r eb4.4 |\n
             db4.2 :4 c4 db4 |\n
             eb4.2{dec} :4 db4{dec} r |\n
             :4 eb4 f4 f4 f4 |\n
             eb4.2 :4 eb4 b#4 |\n
             :2 cb4 cb4{dec} |\n
             :2 cb4{- dec} r |\n
             \\ks e \\ts 3 4 \\tempo 168 r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 | \\ts 4 4 r.1 | \\ts 3 4 r.1 | r.1 |\n
             \\ts 4 4 r.2 :4 r g#4{dy f} |\n
             :4 g#4 f#4 g#4.2 |\n
             g#4{-}.2 :4 r g#4 |\n
             :4 g#4 a4 b4.2 |\n
             \n

             \\track "Tenor"\n
             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db \\clef bass\n
             \\lyrics "Da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, in dí- e- bus no- stris, qui- a non est á- li- us qui pu- gnet pro no- bis ni- si tu De- - us _ no- ster. _ su- per- ve- ni- én- te,"\n
             r.4{dy f} | r.1 | r.1 | r.1 | r.1 |\n
             :4 r db4{dy pp cre} db4{cre} db4{cre} |\n
             db4{d}.4 db4.8 db4.2{dec} |\n
             :4 r db4{cre} db4{cre} db4{cre} |\n
             c4{d}.4 c4.8 c4.2{dec} | r.1 | r.1 |\n
             :4 r eb4{dy p cre} eb4{cre} eb4{cre} |\n
             db4{d}.4 db4.8 db4.2{dec} |\n
             :4 r d4{cre} d4{cre} d4{cre} |\n
             eb4{d}.4 eb4.8 eb4.2 |\n
             :4 r c4{dy mp} :4{tu 3} c4 c4 eb4 |\n
             :2 db4{cre} db4{cre} |\n
             r.4 :8 db4{dy mf} db4 db4.4 cb4 |\n
             cb4{d}.4 :8 cb4 cb4 r cb4 |\n
             cb4.2 :4 db4 cb4 |\n
             bb3.2{dec} :4 bb3{dec} r |\n
             bb3.2{dy mp} :4 bb3 bb3 |\n
             :4 gb3 bb3 ab3 eb3 |\n
             :2 eb3 eb3{dec} |\n
             :2 eb3{- dec} r |\n
             \\ks e \\ts 3 4 \\tempo 168 r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 | \\ts 4 4 r.1 | \\ts 3 4 r.1 | r.1 |\n
             \\ts 4 4 r.1 | r.1 | :8 a3{dy f} e3 g#3 d#3 f#3 c#3 r.4 |\n
             r.1 |\n
             \n

             \\track "Bass"\n
             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db \\clef bass\n
             \\lyrics "Da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, da pa- cem, Dó- mi- ne, in dí- e- bus no- stris, qui- a non est á- li- us qui pu- gnet pro no- bis ni- si tu De- us _ no- ster. _ An- gu- stí- a, _ an- gu- stí- a"\n
             r.4{dy f} | r.1 | r.1 | r.1 | r.1 |\n
             :4 r bb3{dy pp cre} bb3{cre} bb3{cre} |\n
             bb3{d}.4 bb3.8 bb3.2{dec} |\n
             :4 r bb3{cre} bb3{cre} bb3{cre} |\n
             bb3{d}.4 bb3.8 bb3.2{dec} | r.1 | r.1 |\n
             :4 r bb3{dy p cre} bb3{cre} bb3{cre} |\n
             bb3{d}.4 bb3.8 bb3.2 |\n
             :4 r bb3{cre} bb3{cre} bb3{cre} |\n
             bb3{d}.4 bb3.8 bb3.2{dec} |\n
             :4 r f3{dy mp} :4{tu 3} f3 f3 f3 |\n
             :2 f3{cre} f3{cre} |\n
             r.4 :8 f3{dy mf} f3 :4 f3 f3 |\n
             f3{d}.4 :8 f3 f3 r f3.4 |\n
             f3.2 :4 f3 f3 |\n
             f3.2{dec} :4 f3{dec} r |\n
             eb3.2{dy mp} :4 eb3 db3 |\n
             cb3.2 :4 cb3 ab2 |\n
             :2 gb2 gb2{dec} |\n
             :2 gb2{- dec} r |\n
             \\ks e \\ts 3 4 \\tempo 168 r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 | \\ts 4 4 r.1 | \\ts 3 4 r.1 | r.1 |\n
             \\ts 4 4 r.2 :4 r g#3 |\n
             :4 g#3 f#3 g#3.2 |\n
             g#3{-}.2 :4 r g#3 |\n
             :4 g#3 a3 b3.2 |\n
             \n

             \\track "Piano"\n
             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db\n
             r.4{dy f} |\n
             (f6 gb5).2 :8 (db6 eb5) bb5 (eb6 f5).4 |\n
             :4 (eb6{-} f5{-}){dec} (ab5 db5){dec} (ab5 bb4).2{dy mf} |\n
             (db6 eb5).2{dec} :8 (bb5 c5){dec} eb6{dec} (ab5 bb4).4{dec} |\n
             (ab5{-} bb4{-}).4{dec} (f6{d} gb5{d}).2 | r.1{dy p} |\n
             r.1 | r.1 | r.1 |\n
             (f6 gb5).2{dy mp} :8 (db6 eb5) bb5 (eb6 f5).4 |\n
             :4 (eb6{-} f5{-}){dec} (ab5 db5){dec} (ab5 bb4).2{dy p dec} |\n
             r.1 | r.1 | r.1 |\n
             r.2 :4 r (eb4 bb3){dy p} |\n
             :2 (f4 ab3) r |\n
             r.1 | r.1 | r.1 | r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 |
             \\ks e \\ts 3 4 \\tempo 168 (a4 e4).4{dy p} :8 g#4 r r.4 |\n
             :8 a4 e4 g#4 r r.4 |\n
             (a4 e4).4 :8 d#4 r r.4 |\n
             :8 a4 e4 d#4 r r.4 |\n
             :8 b4{dy mp} e4{cre} a4{cre} r{cre} a4{cre} e4{cre} |\n
             :8 g#4{cre} r{cre} a4{cre} e4{cre} d#4{cre} r{cre} |\n
             \\ts 4 4 :4 (f#5 b4 f#4){dy f} r (b5 e5 b4) r |\n
             \\ts 3 4 :8 a4{dy mf} e4 g#4 d#4 r.4 |\n
             :8 a4 e4 g#4 d#4 r.4 |\n
             \\ts 4 4 :8 a4{dy f} e4 g#4 d#4 f#4 c#4 r.4 |\n
             :4 (f#4 c#4 b3) r (b4 f#4 e4) r |\n
             :8 a4 e4 g#4 d#4 f#4 c#4 r.4 |\n
             :4 (g#4 c#4 b3) r (b4 f#4) r |\n
             \n

             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db\n
             r.4{dy f} |\n
             (db5 eb4).2 :4 (bb4 c4) (ab4 bb3) |\n
             :4 (ab4{-} bb3{-}){dec} (ab4 c4){dec} (ab4 c4).2{dy mf} |\n
             (bb4 c4).2{dec} :4 (db5 eb4){dec} (ab4 bb3){dec} |\n
             (ab4{-} bb3{-}).4{dec} (db5{d} eb4{d}).2 | r.1{dy p} |\n
             r.1 | r.1 | r.1 |\n
             (db5 eb4).2{dy mp} :4 (bb4 c4) (ab4 bb3) |\n
             :4 (ab4{-} bb3{-}){dec} (ab4 c4){dec} (ab4 c4).2{dy p dec} |\n
             r.1 | r.1 | r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 | r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 |\n
             \\ks e \\ts 3 4 \\tempo 168 r.1{dy p} | r.1 | r.1 |\n
             r.1 | r.1{dy mp cre} | r.1{cre} | \\ts 4 4 r.1{dy f} | \\ts 3 4 r.1{dy mf} | r.1 |\n
             \\ts 4 4 r.1{dy f} | r.1 | r.1 | r.1 |\n
             \n

             \\staff {score} \\tuning piano \\instrument acousticgrandpiano \\ks Db \\clef bass\n
             (bb2 bb1).4{dy f} |\n
             (bb2{-} bb1{-}).1 |\n
             (bb2{- d} bb1{- d}).2 (bb2 bb1).4{dy mf} |\n
             (bb2{-} bb1{-}).1 |\n
             (bb2{- d} bb1{- d}).2 (bb2 bb1).4{dy p} |\n
             (bb2 bb1).1 |\n
             :4 (bb2{-} bb1{-}) r r.2 | r.1 |\n
             r.2 :4 r (bb2 bb1) |\n
             (bb2{-} bb1{-}).1{dy mp} |\n
             (bb2{- d}  bb1{- d}).2{dec} (bb2 bb1).4{dy p} |\n
             (bb2 bb1).1 |\n
             :4 (bb2{-} bb1{-}) r r.2 |\n
             r.1 |\n
             r.2 :4 r (eb3 gb2){dy p} |\n
             :2 (c3 f2) r |\n
             r.1 | r.1 | r.1 | r.1 | r.1 | r.1 |\n
             r.1 | r.1 | r.1 |\n
             \\ks e \\ts 3 4 \\tempo 168 :4 (a3 c#3){dy p} r r |\n
             :4 (a3 c#3) r r |\n
             :4 (a3 c#3) r r |\n
             :4 (a3 c#3) r r |\n
             :4 (a3 c#3){dy mp cre} r{cre} (a3 c#3){cre} |\n
             :4 r{cre} (a3 c#3){cre} r{cre} |\n
             \\ts 4 4 :4 (g#2 g#1){dy f} r (f#2 f#1) r |\n
             \\ts 3 4 :4 (c#3 g#2 c#2){dy mf} r r |\n
             :4 (c#3 g#2 c#2) r r |\n
             \\ts 4 4 :4 (c#3 g#2 c#2){dy f} r r (g#2 g#1) |\n
             :4 (a2 a1) r (g#2 g#1) r |\n
             :4 (c#3 g#2 c#2) r r (g#2 g#1) |\n
             :4 (a2 a1) r (g#2 g#1) r |\n
            `,
            [0,1,2,3,4,5]
        );

        let texToDisplay = document.getElementById("texToDisplay");
        texToDisplay.options[3] = null;

        let data = {
            sheetMusicId: "5050284854B611EAAEC302F168716C78"
        };
        getSpecificSheetMusic(data)
            .then(response => {
                let partList = response.data.part_list;
                if (AlphaTabRunner.texLoaded === null) {
                    AlphaTabRunner.texLoaded = new TexLoaded(
                        "Sheet Music",
                        partList,
                        response.data.clefs,
                        response.data.part,
                        null,
                        1,
                        1,
                        "5050284854B611EAAEC302F168716C78"
                    );
                } else {
                    AlphaTabRunner.texLoaded.update(
                        "Sheet Music",
                        partList,
                        response.data.clefs,
                        response.data.part,
                        null,
                        1,
                        1
                    );
                }

                this.updateDropdown(partList);

                for (let i = 0; i < partList.length; i++) {
                    if (partList[i] === AlphaTabRunner.texLoaded.myPart) {
                        AlphaTabRunner.texLoaded.updateCurrentTrackIndexes(i);
                        let sheetMusicPartDropdown = document.getElementById("sheetMusicPart");
                        if (sheetMusicPartDropdown) {
                            sheetMusicPartDropdown[i].selected = true;
                        }
                        break;
                    }
                }

                // AlphaTabRunner.api.tex(
                //     response.data.sheet_music,
                //     AlphaTabRunner.texLoaded.currentTrackIndexes
                // );

                data.partName =
                    response.data.part_list[AlphaTabRunner.texLoaded.currentTrackIndexes[0]];
                getPartSheetMusic(data)
                    .then(response => {
                        AlphaTabRunner.noteStream = response.data.performance_expectation;
                        AlphaTabRunner.noteList = new NoteList(0);

                        AlphaTabRunner.noteList.updateBounds(
                            response.data.lower_upper[0],
                            response.data.lower_upper[1]
                        );
                        AlphaTabRunner.texLoaded.setMeasureLengths(
                            response.data.measure_lengths,
                            AlphaTabRunner.barCount
                        );
                        AlphaTabRunner.sheetMusicLength =
                            AlphaTabRunner.texLoaded.measureLengths.length;
                        AlphaTabRunner.texLoaded.updateLengthsPerSection(
                            1,
                            AlphaTabRunner.texLoaded.measureLengths.length + 1,
                            AlphaTabRunner.barCount
                        );
                        AlphaTabRunner.texLoaded.typeOfTex = "Sheet Music";
                    })
                    .catch(error => {
                        logs.sheetMusicError(
                            error.response.status,
                            error.response.data,
                            "[AlphaTabRunner/loadTex]"
                        );
                    });
            })
            .catch(error => {
                logs.sheetMusicError(
                    error.response.status,
                    error.response.data,
                    "[AlphaTabRunner/loadTex]"
                );
            });
    }
}

export default AlphaTabRunner;
